"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Debounces the given listenable source
 *
 * @param {number} wait - The number of ms to wait before letting a value pass
 * @returns {Function}
 */
function debounce(wait) {
    return function (source) { return function (start, sink) {
        if (start !== 0)
            return;
        var timeout;
        source(0, function (t, d) {
            if (t === 1 || (t === 2 && d === undefined)) {
                // t === 1 means the source is emitting a value
                // t === 2 and d === undefined means the source emits a completion
                if (!timeout && t === 2) {
                    return sink(t, d);
                }
                if (timeout) {
                    clearTimeout(timeout);
                }
                timeout = setTimeout(function () {
                    sink(t, d);
                    timeout = undefined;
                }, wait);
            }
            /*
             * no need to handle the t === 0 case because
             * the operator never needs to talkback to the source
             *
             * nothing specific to do when the source
             * sends a t === 2 d !== undefined signal
             */
            else
                sink(t, d);
        });
    }; };
}
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map