'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var widgetCoreSdk = require('@livechat/widget-core-sdk');

var withCustomerProfile = function withCustomerProfile(widget) {
  var customerProfile = null;
  function onCustomerProfile(profile) {
    customerProfile = profile;
  }
  widget.on('customer_profile', onCustomerProfile);
  return Object.assign({}, widget, {
    getCustomerProfile: function getCustomerProfile() {
      return customerProfile;
    }
  });
};

// eslint-disable-next-line @typescript-eslint/ban-types
var withRichMessages = function withRichMessages(widget) {
  return Object.assign({}, widget, {
    sendQuickReplies: function sendQuickReplies(title, buttons) {
      return widget.sendMessage('send_quick_replies', {
        title: title,
        buttons: buttons
      });
    },
    sendCards: function sendCards(cards) {
      return widget.sendMessage('send_cards', Array.isArray(cards) ? cards : [cards]);
    }
  });
};

var withTheme = function withTheme(widget) {
  var theme = new URLSearchParams(window.location.search).get('theme') || null;
  function onThemeChange(data) {
    theme = data.theme;
  }
  widget.on('change_theme', onThemeChange);
  return Object.assign({}, widget, {
    getTheme: function getTheme() {
      return theme;
    }
  });
};

(function (SectionComponentType) {
  SectionComponentType["Button"] = "button";
  SectionComponentType["LabelValue"] = "label_value";
  SectionComponentType["Title"] = "title";
  SectionComponentType["Link"] = "link";
  SectionComponentType["Line"] = "line";
  SectionComponentType["Customer"] = "customer";
  SectionComponentType["Tags"] = "tags";
})(exports.SectionComponentType || (exports.SectionComponentType = {}));

var _componentValidators;
var AVAILABLE_COMPONENT_TYPES = Object.keys(exports.SectionComponentType).map(function (name) {
  return exports.SectionComponentType[name];
});
var componentValidators = (_componentValidators = {}, _componentValidators[exports.SectionComponentType.Button] = function (_ref) {
  var data = _ref.data;
  if (!data || !data.label) {
    throw new Error("The button component must have a 'label' property");
  }
  if (!data.id) {
    throw new Error("The button component must have a 'id' property");
  }
}, _componentValidators[exports.SectionComponentType.Link] = function (_ref2) {
  var data = _ref2.data;
  if (!data || !data.url) {
    throw new Error("The link component must have a 'url' property");
  }
}, _componentValidators[exports.SectionComponentType.Title] = function (_ref3) {
  var data = _ref3.data;
  if (!data || !data.title) {
    throw new Error("The title component must have a 'title' property");
  }
  if (typeof data.imgSize !== 'undefined') {
    if (!['big', 'small'].includes(data.imgSize)) {
      throw new Error("The title component must have a valid 'imgSize' property, allowed values are 'small' and 'big'");
    }
  }
}, _componentValidators);
function assertComponent(component) {
  if (typeof component !== 'object') {
    throw new Error("The component definition must be an object");
  }
  var type = component.type;
  if (typeof type !== 'string' || !AVAILABLE_COMPONENT_TYPES.includes(type)) {
    throw new Error("Invalid component type given: '" + type + "'");
  }
  var validator = componentValidators[type];
  if (validator) {
    validator(component);
  }
}
function assertSection(section) {
  if (!section) {
    throw new Error('You need to provide a section defintion');
  }
  var title = section.title,
    components = section.components;
  if (typeof title !== 'string' || !title) {
    throw new Error("You need to provide a title for the new section using the 'title' property");
  }
  if (!Array.isArray(components) || !components.length) {
    throw new Error("You need to provide an array of component definitions for your section using the 'components' property");
  }
  components.forEach(assertComponent);
}

function DetailsWidget(connection) {
  var base = widgetCoreSdk.createWidget(connection, {
    putMessage: function putMessage(text) {
      return connection.sendMessage('put_message', text);
    },
    watchMessages: function watchMessages() {
      return connection.sendMessage('watch_messages');
    },
    refreshSession: function refreshSession() {
      return connection.sendMessage('plugin_loaded');
    },
    modifySection: function modifySection(section) {
      assertSection(section);
      return connection.sendMessage('customer_details_section', section);
    }
  });
  var widget = widgetCoreSdk.withAmplitude(withRichMessages(withCustomerProfile(withTheme(widgetCoreSdk.withPayments(base)))));
  return widget;
}
function createDetailsWidget() {
  var widget;
  return widgetCoreSdk.createConnection().then(function (connection) {
    widget = DetailsWidget(connection);
    return connection.sendMessage('plugin_inited');
  }).then(function () {
    return widget;
  });
}

var withPageData = function withPageData(widget) {
  var pageData = null;
  function onPageData(data) {
    pageData = data;
  }
  widget.on('page_data', onPageData);
  return Object.assign({}, widget, {
    getPageData: function getPageData() {
      return pageData;
    }
  });
};

function FullscreenWidget(connection) {
  var base = widgetCoreSdk.createWidget(connection, {
    setNotificationBadge: function setNotificationBadge(count) {
      return connection.sendMessage('set_fullscreen_widget_notification_badge', count);
    },
    navigate: function navigate(pathname) {
      return connection.sendMessage('navigate_from_fullscreen_widget', pathname);
    },
    setReportsFilters: function setReportsFilters(filters) {
      return connection.sendMessage('set_reports_filters', filters);
    }
  });
  return widgetCoreSdk.withAmplitude(withPageData(withTheme(widgetCoreSdk.withPayments(base))));
}
function createFullscreenWidget() {
  var widget;
  return widgetCoreSdk.createConnection().then(function (connection) {
    widget = FullscreenWidget(connection);
    return connection.sendMessage('plugin_inited');
  }).then(function () {
    return widget;
  });
}

function MessageBoxWidget(connection) {
  var base = widgetCoreSdk.createWidget(connection, {
    putMessage: function putMessage(msg) {
      var data;
      if (typeof msg === 'string') {
        data = {
          type: 'message',
          value: msg
        };
      } else {
        data = {
          type: 'rich_message',
          payload: msg
        };
      }
      return connection.sendMessage('put_messagebox_message', data);
    }
  });
  var widget = widgetCoreSdk.withAmplitude(withRichMessages(withCustomerProfile(withTheme(widgetCoreSdk.withPayments(base)))));
  return widget;
}
function createMessageBoxWidget() {
  var widget;
  return widgetCoreSdk.createConnection().then(function (connection) {
    widget = MessageBoxWidget(connection);
    return connection.sendMessage('plugin_inited');
  }).then(function () {
    return widget;
  });
}

function SettingsWidget(connection) {
  var base = widgetCoreSdk.createWidget(connection, {
    redirect: function redirect(target) {
      return connection.sendMessage('redirect', target);
    }
  });
  return widgetCoreSdk.withAmplitude(withPageData(withTheme(widgetCoreSdk.withPayments(base))));
}
function createSettingsWidget() {
  var widget;
  return widgetCoreSdk.createConnection().then(function (connection) {
    widget = SettingsWidget(connection);
    return connection.sendMessage('plugin_inited');
  }).then(function () {
    return widget;
  });
}

exports.createDetailsWidget = createDetailsWidget;
exports.createFullscreenWidget = createFullscreenWidget;
exports.createMessageBoxWidget = createMessageBoxWidget;
exports.createSettingsWidget = createSettingsWidget;
exports.withCustomerProfile = withCustomerProfile;
