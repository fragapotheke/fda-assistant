import * as CSS from 'csstype';
declare type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;
declare type WritableKeys<T> = {
    [P in keyof T]-?: IfEquals<{
        [Q in P]: T[P];
    }, {
        -readonly [Q in P]: T[P];
    }, P>;
}[keyof T];
declare type Primitive = string | number | boolean | undefined | null;
declare type PrimitiveKeys<T> = {
    [K in keyof T]: T[K] extends Primitive ? K : never;
}[keyof T];
export declare type ValidAttributes<T extends HTMLElement> = Partial<Pick<T, PrimitiveKeys<T> & WritableKeys<T>>>;
export declare type Style = CSS.Properties;
export {};
//# sourceMappingURL=types.d.ts.map