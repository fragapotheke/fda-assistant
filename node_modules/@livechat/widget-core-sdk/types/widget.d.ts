import { IConnection, ConnectionEmitter } from './connection';
import { Omit } from './utils/types';
export declare type AnyWidgetApi = {
    [key: string]: any;
};
export declare type AnyWidgetEvents = {
    [event: string]: any;
};
export declare type WidgetBase<Events extends AnyWidgetEvents = AnyWidgetEvents> = Pick<ConnectionEmitter<Events>, 'on' | 'off'> & {
    sendMessage(name: string, data?: any): Promise<void>;
};
export declare type Widget<Api extends AnyWidgetApi = AnyWidgetApi, Events extends AnyWidgetEvents = AnyWidgetEvents> = WidgetBase<Events> & Omit<Api, keyof WidgetBase>;
export declare type WidgetMixin<Api, Events> = {
    <BaseApi extends AnyWidgetApi, BaseEvents extends AnyWidgetEvents>(widget: Widget<BaseApi, BaseEvents>): Widget<BaseApi & Api, BaseEvents & Events>;
};
export declare function createWidget<Api extends AnyWidgetApi, Events extends AnyWidgetEvents = {}>(connection: IConnection<Events>, api: Api): Widget<Api, Events>;
