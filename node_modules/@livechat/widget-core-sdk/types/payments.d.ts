import { WidgetMixin } from './widget';
declare enum ChargeType {
    DirectCharge = "direct_charge",
    RecurrentCharge = "recurrent_charge"
}
interface IPaymentIntent {
    name: string;
    price: number;
    per_account: boolean;
    test: boolean;
    return_url: string | null;
    months?: number;
    trial_days?: number;
    quantity?: number;
    metadata: {
        type: ChargeType;
        isExternalTransaction: boolean;
        showBillingCyclePicker: boolean;
        icon: string;
        description?: string;
    };
}
export interface IChargeBase {
    id: string;
    buyer_organization_id: string;
    buyer_license_id: number;
    buyer_account_id: string;
    buyer_entity_id: string;
    seller_client_id: string;
    order_client_id: string;
    order_organization_id: string;
    name: string;
    price: number;
    return_url: string;
    test: boolean;
    per_account: boolean;
    status: string;
    confirmation_url: string;
    commission_percent: number;
    created_at: string;
    updated_at: string;
}
export interface IDirectCharge extends IChargeBase {
    quantity: number;
}
export interface IRecurrentCharge extends IChargeBase {
    trial_days: number;
    months: number;
    external_id?: string;
    trial_ends_at: string | null;
    cancelled_at: string | null;
    current_charge_at: string | null;
    next_charge_at: string | null;
}
export declare type TransactionEvent = {
    chargeId: string;
};
export declare type TransactionError = {
    error: unknown;
};
export declare type UpdateBillingCycleEvent = {
    billingCycle: number;
    paymentIntent: IPaymentIntent;
    chargeId: string;
};
export declare type Charge = IDirectCharge | IRecurrentCharge;
export declare type Metadata = {
    icon: string;
    description?: string;
    showBillingCyclePicker?: boolean;
};
export interface IWithPaymentsApi {
    startTransaction(charge: Charge, metadata: Metadata): void;
}
export interface IWithPaymentsEvents {
    transaction_declined: TransactionEvent;
    transaction_accepted: TransactionEvent;
    transaction_failed: TransactionError;
    update_billing_cycle: UpdateBillingCycleEvent;
}
export declare const withPayments: WidgetMixin<IWithPaymentsApi, IWithPaymentsEvents>;
export {};
